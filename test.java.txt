import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

public class test extends JFrame implements ActionListener{

    JTextArea textArea;
    boolean stop;
    JButton button1, button2, button3, button4, button5, button6;

    public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          createAndShowGUI();
        }
      });
    }

    private static void createAndShowGUI() {
      test myFrame = new test();

      myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      myFrame.prepareUI();

      myFrame.pack();
      myFrame.setVisible(true);
    }

    private void prepareUI(){
      textArea = new JTextArea();
      textArea.setEditable(false);
      Panel panelDisplay = new Panel(new FlowLayout());
      panelDisplay.add(textArea);

      Panel buttons = new Panel(new GridLayout(3, 2, 3, 3));
      button1 = new JButton("Wave");
      buttons.add(button1);
      button2 = new JButton("Vision");
      buttons.add(button2);
      button3 = new JButton("Dance");
      buttons.add(button3);
      button4 = new JButton("Conversation");
      buttons.add(button4);
      button5 = new JButton("Tone Analyzer");
      buttons.add(button5);
      button6 = new JButton("button6");
      buttons.add(button6);

      button1.addActionListener(this);
      button2.addActionListener(this);
      button3.addActionListener(this);
      button4.addActionListener(this);
      button5.addActionListener(this);
      button6.addActionListener(this);

      setLayout(new BorderLayout());
      add(panelDisplay, BorderLayout.NORTH);
      add(buttons, BorderLayout.CENTER);

      setTitle("TJBot Control");
      setSize(280, 150);
      setVisible(true);
    }
    public void callShell(String str, int id) {
      String[] cmd = {"/bin/bash","-c",str };
      try
      {
	ProcessBuilder pb = new ProcessBuilder(str.split("\\s+"));
	Process p = pb.start();
	//Runtime rt = Runtime.getRuntime();
       	//Process p = rt.exec(str);
	
       	//BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
       	//String line = null;
       	//while((line=input.readLine()) != null) {
       	//     System.out.println(line);
	//}
       	 
	 if(id == 1){
		p.waitFor(10, TimeUnit.SECONDS);
		p.destroy();
	}
	 int exitVal = p.waitFor();
       	 System.out.println("Exited with error code " + exitVal);  
	}
      catch(Exception e) {
        System.out.println(e.toString());
        e.printStackTrace();
      }
    }
    @Override
    public void actionPerformed(ActionEvent e) {
      String cmd = "";
      if (e.getSource() == button1) {
	stop = true;
        callShell("sudo node /home/pi/tjwave/wavetest.js", 1);
      }
      else if (e.getSource() == button2) {
	stop = true;
        callShell("sudo node /home/pi/tjvision/tjvision.js", 2);
      }
      else if (e.getSource() == button3) {
	stop = true;
        callShell("sudo node /home/pi/tjwave/dance.js",3);
      }
      else if (e.getSource() == button4) {
	stop = true;
        callShell("sudo node /home/pi/Desktop/tjbot/recipes/conversation/conversation.js",4);
      }
      else if (e.getSource() == button5) {
	stop = true;
        callShell("sudo node /home/pi/tjbot-raspberrypi-nodejs/run.js",5);
      }
      else if (e.getSource() == button6) {
	stop = true;
        callShell(cmd,6);
      }
      JOptionPane.showMessageDialog(null, "Everything fine!");
    }

}
